1.是否了解动态规划？
  动规，本质上就是划分子问题的算法，站在任何一个子问题的处理上看，当前子问题的提出都要依赖现有的类似结论，而当前问题的结论，是后面问题求解的铺垫，
  任何DP都是基于存储的算法，核心是状态转移方程

2.实践中如何优化mysql？
  从强到弱：
    1.sql语句及索引的优化
    2.数据库表结构的优化
    3.系统配置的优化
    4.硬件的优化
    
3.什么情况下，设置了索引但是无法使用？
  1.以“%”开头的LIKE语句，模糊匹配
  2.OR语句前后没有同时使用索引
  3.数据类型出现隐式转化（如 varchar不加单引号自动会转换为int型）
  
4.sql语句优化
  alter尽量多次合并为一次
  insert和delete也需要合并

5.索引底层原理和优化
  B+树 经过优化的B+树
  主要是在所有叶子节点中增加了指向下一个节点的指针，因此InnoDB建议为大部分表使用默认自增的主键作为主索引
  
6.TCP三次握手和四次挥手的全过程
    三次握手：
      第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；
      第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；
      第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
      
      握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。
      理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。

    四次挥手
      与建立连接的“三次握手”类似，断开一个TCP连接则需要“四次握手”。
      第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，
                  也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，
                  但是，此时主动关闭方还可以接受数据。
      第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。
      第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。
      第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。
      
7.HashMap的底层数据结构，碰撞解决策略、对过载因子的理解？
    答：数组和链表来实现数据的储存，它通过计算散列码来决定存储的位置，也能够通过散列码来快速的计算出对象所存储的位置， HashMap中主要是通过key的hashCode来计算hash值的，
        只要hashCode 相同，计算出来的 hash 值就一样。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。
        解决hash冲突的方法有很多， HashMap 底层是通过链表来解决hash冲突的（拉链法）

        过载因子是表示 Hsah 表中元素的填满的程度。过载因子越大,填满的元素越多,好处是：空间利用率高了 , 但冲突的机会加大了
        反之, 过载因子越小,填满的元素越少，好处是：冲突的机会减小了 , 但空间浪费多了 . 冲突的机会越大 , 则查找的成本越高 . 反之 , 查找的成本越小

8.Synchronize和volatile 的异同，对ConcurrentHanshMap和CopyOnWriteLinkedList的理解
      1、volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,
         synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.
      2、volatile仅能使用在变量级别,synchronized则可以使用在变量,方法.
      3、volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞.
      
9.如何处理查询效率较低的嵌套查询语句，慢查询的定位
     答：连接查询方式来代替嵌套查询
        可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，
        可以实时地查看SQL 的执行情况，同时对一些锁表操作进行优化。
        
10.一个被赋为null的引用类型对象在启动gc时是否会被回收
     答：静态字段不被释放，是因为类型的静态字段一旦被创建，该根就一直存在。所以垃圾回收器始终不会认为它是一个垃圾。
         非静态字段不存在这个问题。将对象改为非静态，再次运行上面的代码，会发现对象随着类型的释放而被释放。
         
11.分页操作
     答：1.使用List接口中的subList(int startIndex, int endIndex)方法实现分页。返回列表中指定的fromIndex（包括）和endIndex（不包括）之间的部分视图
         2.使用数据库SQL语句实现分页。MySQL数据库使用limit关键字，比如select * from t_student limit 0, 10，表示的是从第0条开始取，取10条记录
         
         
12.在多个商品中查找出点击量最高的前五个，要求内存级别的实现并且能解决并发的问题，例如，如何解决多个用户同时点击同一商品的问题
     在方法前 加上synchronized 关键字，使同一时间只能有一个人调用方法。
      
13.实现线程安全的单例模式？
     答：多线程安全单例模式
    (使用同步锁)对获取实例的方法进行同步，用synchronized锁住方法
    (双重锁)只锁住其中的new语句.
    
14.在o(1)的时间复杂度，o(n)的空间复杂度条件下求当前栈的最大值?
      答：两个同步的栈，一个存储元素，一个存储当前栈中最大值，第一个元素push作为max存入新栈，然后每push一次与max进行比较，
          如果大于max，将此元素替换max存入新栈，这样就能实现O(1)时间复杂度，O(n)空间复杂度
